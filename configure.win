@echo off
echo ">> Running package configure.win to check for CUDA and OpenCL..."

REM ------------------------------------------------------------------------------
REM 1) (Optional) Start fresh: copy Makevars.win.in -> Makevars.win
REM    so we don't keep appending flags on repeated installs

if exist src\Makevars.win.in (
  copy src\Makevars.win.in src\Makevars.win
) else (
  echo :: Generated by configure.win > src\Makevars.win
)

REM ------------------------------------------------------------------------------
REM 2) Detect CUDA (by checking for nvcc in PATH)

where nvcc >nul 2>nul
if %ERRORLEVEL%==0 (
  echo ">> Found nvcc; enabling CUDA..."
  REM Append a flag so your C++ code sees -DUSE_CUDA
  echo PKG_CPPFLAGS="%PKG_CPPFLAGS% -DUSE_CUDA" >> src\Makevars.win

  REM Example: link with CUDA libraries if needed:
  REM echo PKG_LIBS="%PKG_LIBS% -L\"C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.8\lib\x64\" -lcudart" >> src\Makevars.win
) else (
  echo ">> nvcc not found; skipping CUDA."
)

REM ------------------------------------------------------------------------------
REM 3) Detect OpenCL by a small compile test

REM First pick a compiler. This is very environment-specific.
REM If you have Rtools with g++, or clang++, or something else, adapt as needed.

where clang++ >nul 2>nul
if %ERRORLEVEL%==0 (
  set COMPILER=clang++
) else (
  set COMPILER=g++
)

REM Test #1: #include <CL/cl.h>
echo #include ^<CL/cl.h^> > testcl.cpp
%COMPILER% -c testcl.cpp -o testcl.obj >nul 2>nul
if %ERRORLEVEL%==0 (
  echo ">> Found OpenCL (CL/cl.h); enabling OpenCL..."
  echo PKG_CPPFLAGS="%PKG_CPPFLAGS% -DUSE_OPENCL" >> src\Makevars.win
  REM On Windows with OpenCL SDK, you typically link with -lOpenCL:
  echo PKG_LIBS="%PKG_LIBS% -lOpenCL" >> src\Makevars.win
) else (
  REM Test #2: #include <OpenCL/cl.h>
  echo #include ^<OpenCL/cl.h^> > testcl.cpp
  %COMPILER% -c testcl.cpp -o testcl.obj >nul 2>nul
  if %ERRORLEVEL%==0 (
    echo ">> Found OpenCL (OpenCL/cl.h); enabling OpenCL..."
    echo PKG_CPPFLAGS="%PKG_CPPFLAGS% -DUSE_OPENCL" >> src\Makevars.win
    echo PKG_LIBS="%PKG_LIBS% -lOpenCL" >> src\Makevars.win
  ) else (
    echo ">> OpenCL not found; skipping OpenCL."
  )
)

REM Clean up
del testcl.cpp 2>nul
del testcl.obj 2>nul

REM ------------------------------------------------------------------------------
REM 4) Show final Makevars.win for debugging

echo ">> Checking for OpenMP support..."

rem We'll try a test compile with our chosen compiler (clang++ or g++).
rem Adapt flags as needed for MSVC (which uses /openmp).

echo #include ^<omp.h^> > test_openmp.cpp
echo int main() { int n=0; #pragma omp parallel { #pragma omp atomic n++; } return n; } >> test_openmp.cpp

%COMPILER% -fopenmp test_openmp.cpp -o test_openmp.exe >nul 2>nul
if %ERRORLEVEL%==0 (
  echo ">> Found OpenMP!"
  echo PKG_CPPFLAGS="%PKG_CPPFLAGS% -DHAVE_OPENMP" >> src\Makevars.win
  echo PKG_CXXFLAGS="%PKG_CXXFLAGS% -fopenmp" >> src\Makevars.win
) else (
  echo ">> OpenMP not available."
)

del test_openmp.cpp 2>nul
del test_openmp.exe 2>nul
echo ">> Finished configure.win. Contents of src\Makevars.win:"
type src\Makevars.win

exit /b 0
