// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// KNN
double KNN(Rcpp::NumericVector data_x, Rcpp::NumericVector data_y, int K, const std::string& mode, const std::string& precision);
RcppExport SEXP _CWUKNN_KNN(SEXP data_xSEXP, SEXP data_ySEXP, SEXP KSEXP, SEXP modeSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data_x(data_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data_y(data_ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type precision(precisionSEXP);
    rcpp_result_gen = Rcpp::wrap(KNN(data_x, data_y, K, mode, precision));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CWUKNN_KNN", (DL_FUNC) &_CWUKNN_KNN, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_CWUKNN(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
